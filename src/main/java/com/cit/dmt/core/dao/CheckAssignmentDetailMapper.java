package com.cit.dmt.core.dao;

import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.cit.dmt.core.model.CheckAssignmentDetail;
import com.cit.dmt.core.model.CheckRoundAssignmentSts;
import com.cit.dmt.core.model.FinalTrans;
import com.github.pagehelper.Page;

public interface CheckAssignmentDetailMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    int insert(CheckAssignmentDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    int insertSelective(CheckAssignmentDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    FinalTrans selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    int updateByPrimaryKeySelective(CheckAssignmentDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table check_assignment_detail
     *
     * @mbg.generated Sun Jul 04 13:35:32 NZST 2021
     */
    int updateByPrimaryKey(CheckAssignmentDetail record);
    Page<FinalTrans> selectPaged(Map<String, Object> criteria);
    int insertAllTask(@Param("projectId") Long projectId, @Param("taskId") Long taskId, @Param("roundId") Long roundId);
    CheckRoundAssignmentSts getTaskCount(Map<String, Object> criteria);
    int taskAssign(@Param("projectId") Long projectId, @Param("taskId") Long taskId, @Param("roundId") Long roundId, @Param("userId") Long userId, @Param("assignAmount") Integer assignAmount);
    int withdrawAssign(@Param("projectId") Long projectId, @Param("taskId") Long taskId, @Param("roundId") Long roundId, @Param("userId") Long userId, @Param("checkStatus") String checkStatus, @Param("withdrawAmount") Integer withdrawAmount);
    int updateCheckResult(@Param("id") Long id, @Param("checkResult") String checkResult, @Param("checkMemo") String checkMemo);
    int updateAdoptionById(@Param("id") Long id, @Param("adoptionStatus") String adoptionStatus);
    int updateAdoptionAll(@Param("projectId") Long projectId, @Param("taskId") Long taskId, @Param("roundId") Long roundId, @Param("userId") Long userId, @Param("adoptionStatus") String adoptionStatus);
}